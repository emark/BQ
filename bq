#!/usr/bin/env perl
use strict;
use lib "/home/hosting_locumtest/usr/local/lib/perl5";
use Mojolicious::Lite;
use DBI;
use utf8;
#plugin 'mail';

open (DBCONF,"< app.conf") || die "Error open dbconfig file";
my @appconf=<DBCONF>;
close DBCONF;
chomp @appconf;
our $dbh = DBI->connect($appconf[0],$appconf[1],$appconf[2],
			{ PrintError => 1, RaiseError => 1 });
$dbh->{'mysql_enable_utf8'} = 1;
$dbh->do('SET NAMES utf8');

my $subscribe="\nКоманда BonusQuest\nwww.bonusquest.ru";
app->plugin(mail => {
    from     => 'robot@bonusquest.ru',
    encoding => 'base64',
    how      => 'smtp',
    howargs  => ['mail.locum.ru',AuthUser=>$appconf[3],AuthPass=>$appconf[4]],
  });
app->secret($appconf[5]);
app->hook(before_dispatch => sub {
               my $self = shift;
               #$self->req->url->base(Mojo::URL->new(q{http://www.bonusquest.ru/}))
	       }
	  );

get '/' => sub {
  my $self = shift;
  my @char=('a'..'z','A'..'Z','1'..'9');
  my $fieldname='';
  foreach(1..20){
      $fieldname.=$char[int(rand(60))];#Generate unique fieldname
  }
  $self->stash(fn=>$fieldname);
  $self->render('index');
};

get '/q:id' => [id=>qw/\d+/]=> sub{
  my $self=shift;
  my $pid=$self->param('id');
  $pid=$dbh->selectrow_array("SELECT PROVIDER.ID FROM PROVIDER WHERE PROVIDER.ID=$pid") || 0;
  my $shop=$dbh->selectall_hashref("SELECT PROVIDER.ID,PROVIDER.URL,PROVIDER.NAME AS PROVIDER,PROVIDER.DESCRIPTION,PROVIDER.EMAIL,PROVIDER.TEL,PROVIDER.BONUSINFO FROM PROVIDER WHERE PROVIDER.ID='$pid'",'ID');
  my $question=$dbh->selectall_hashref("SELECT QUESTION.ID,QUESTION.CONTENT,QUESTION.TYPE,QUESTION.ANSWERS FROM QUESTION LEFT JOIN PROVIDER ON QUESTION.PID=PROVIDER.ID WHERE QUESTION.QUIZ=1 AND PROVIDER.ID=$pid",'ID') || undef;
  if(!%{$question}){
    $self->stash(capt=>'Опрос не найден',message=>"Здесь пока нет ни опросов ни бонусов. Подождем...");
    return $self->render('robot');
  }
  $self->stash(pid=>$pid,
               shop=>$shop,
               question=>$question,
               formmessage=>'',
               questmessage=>'');
  $self->render('quiz');
};

post '/q:id' => [id=>qw/\d+/]=> sub{
  my $self=shift;
  my $pid=$self->param('pid');
  my $param = $self->req->params->to_hash;
  my $answer='';
  my $bonusid='';
  my $sth;
  my @ref;
  my $SQL='';
  my @char=('a'..'z','A'..'Z','1'..'9');
  my $bonusinfo='';#write information of bonus as a string
  my $bonuscode='';
  my $formvalidate='';
  my $questvalidate='';
  
  my $shop=$dbh->selectall_hashref("SELECT PROVIDER.ID,PROVIDER.URL,PROVIDER.NAME AS PROVIDER,PROVIDER.BONUSINFO FROM PROVIDER WHERE PROVIDER.ID='$pid'",'ID');
  my $question=$dbh->selectall_hashref("SELECT QUESTION.ID,QUESTION.CONTENT,QUESTION.TYPE,QUESTION.ANSWERS FROM QUESTION LEFT JOIN PROVIDER ON QUESTION.PID=PROVIDER.ID WHERE QUESTION.QUIZ=1 AND PROVIDER.ID=$pid",'ID') || 0;
  my $quizcheck=$dbh->selectall_arrayref("SELECT QUESTION.ID FROM QUESTION WHERE QUESTION.PID=$pid AND QUESTION.QUIZ=1");
  my $bonuscodestatus=$dbh->selectrow_array("SELECT 1 FROM BONUS LEFT JOIN ANSWER ON BONUS.ID=ANSWER.BONUSID LEFT JOIN QUESTION ON ANSWER.QUESTIONID=QUESTION.ID WHERE QUESTION.PID=$pid AND BONUS.STATUS=0 AND BONUS.EMAIL=\"$param->{'email'}\" GROUP BY BONUS.EMAIL");
    
  #Validation rules    
  if($param->{'email'} !~/^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,4}$/){
    $formvalidate=$formvalidate.'Укажите корректный e-mail';
  }elsif($bonuscodestatus==1){
    $formvalidate=$formvalidate.'У вас есть ещё действующий код бонуса';
  }elsif(!$param->{'tosagree'}){
    $formvalidate=$formvalidate.'Не приняты условия Пользовательского соглашения';
  }
  foreach my $key(@{$quizcheck}){
    if(!$param->{$key->[0]}){
      $questvalidate='Есть неотвеченные вопросы';
    }
  }  
  
  if(!$formvalidate && !$questvalidate){
    #Generate bonuscode
    foreach(1..12){
      $bonuscode.=$char[int(rand(60))];
    }
    
    #Create order code
    $bonusinfo=$dbh->selectrow_array("SELECT PROVIDER.BONUSINFO FROM PROVIDER WHERE PROVIDER.ID=$pid");
    $dbh->do("INSERT INTO BONUS (ID,STATUS,SYSDATE,EMAIL,CODE,BONUSINFO) VALUES (NULL,0,NOW(),\"$param->{'email'}\",\"$bonuscode\",\"$bonusinfo\")") || die $dbh->errstr;
    $bonusid=$dbh->last_insert_id('','',"BONUS",'ID');
    $sth=$dbh->prepare("SELECT QUESTION.ID AS QID FROM QUESTION WHERE QUESTION.PID=$pid AND QUESTION.QUIZ=1");
    $sth->execute;
    
    #Record answer to DB
    while(@ref=$sth->fetchrow_array){
      $answer=join(';',$self->param($ref[0]));
      $dbh->do("INSERT INTO ANSWER (ID,QUESTIONID,BONUSID,CONTENT,SYSDATE) VALUES (NULL,$ref[0],$bonusid,\"$answer\",NOW())") || die $dbh->errstr;
    }
    $self->session(quizid=>0);
    
    $self->mail(to=>$param->{'email'},
                subject=>"Ваш код бонуса от ".$shop->{$pid}{'URL'},
                data=>"Приветствуем!\n\nВы приняли участие в опросе от ".$shop->{$pid}{'PROVIDER'}." http://".$shop->{$pid}{'URL'}.
                "\nВ благодарность за ваши ответы ".$shop->{$pid}{'PROVIDER'}." дарит вам бонус: ".$bonusinfo."\n".
                "Ваш код: $bonuscode\nИспользовать бонус вы можете уже сейчас! При обращении в ".$shop->{$pid}{'PROVIDER'}." просто укажите код $bonuscode в комментарии к вашему заказу.".
                "\nЕсли вам необходимо распечатать код или уточнить какие бонусы у вас есть, вы можете это сделать на сайте BonusQuest (http://www.bonusquest.ru)".
                "\nСпасибо за то, что вы с нами!\n".$subscribe);
    $self->redirect_to('thankyou.html');
  }else{
    
    # Validation is not OK
    $self->stash(pid=>$pid,
                 shop=>$shop,
                 formmessage=>$formvalidate,
                 questmessage=>$questvalidate,
                 question=>$question);
    $self->render('quiz');
  }
};

get '/thankyou'=>sub{
  my $self=shift;
  $self->stash(capt=>'Спасибо за ответы',message=>'Мы отправили вам письмо на указанный адрес электронной почты.');
  $self->render('robot');
};

post '/balance'=>sub{
  my $self=shift;
  my $email=$self->param('email');
  if(!$email || $email !~ /^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,4}$/){
    $self->stash(capt=>'Ошибка написания',message=>'Вы неверно указали адрес электронной почты.');
    return $self->render('robot');
  }
  my $balance=$dbh->selectall_arrayref("SELECT BONUS.CODE,PROVIDER.NAME,PROVIDER.URL,BONUS.BONUSINFO FROM BONUS LEFT JOIN ANSWER ON BONUS.ID=ANSWER.BONUSID LEFT JOIN QUESTION ON ANSWER.QUESTIONID=QUESTION.ID LEFT JOIN PROVIDER ON QUESTION.PID=PROVIDER.ID WHERE BONUS.STATUS=0 AND BONUS.EMAIL=\"$email\" GROUP BY BONUS.ID") || undef;
  my $mailmessage='';
  if($balance->[0]){
    my $n=1;
    $mailmessage="Приветствуем!\nВы или возможно кто-то другой попросил прислать список действующих бонусов.\nИтак, ваши бонусы:\n";
    foreach my $key(@{$balance}){
      $mailmessage=$mailmessage."$n. $key->[1], http://$key->[2]\nБонус: $key->[3]\nКод: $key->[0]\n\n";
      $n++;
    }
    $self->mail(to=>$email,
                subject=>'Список действующих бонусов',
                data=>$mailmessage.$subscribe);
  }
  $self->stash(capt=>'Ваши бонусы отправлены',message=>'Список действующих бонусов отправлен на указанный адрес электронной почты.');
  $self->render('robot');
};

post '/bonus'=>sub{
  my $self=shift;
  my $param=$self->req->params->to_hash;
  my $fn=$param->{'fn'};
  my $bonuscode=$param->{$fn};#Get unique bonuscode fielname
  my @char=('a'..'z','A'..'Z','1'..'9');
  my $fieldname='';
  foreach(1..20){
      $fieldname.=$char[int(rand(60))];#Generate unique fieldname
    }
  my $bonusinfo=$dbh->selectall_hashref("SELECT BONUS.ID,BONUS.SYSDATE,BONUS.STATUSDATE,BONUS.STATUS,BONUS.BONUSINFO,PROVIDER.NAME AS PROVIDER,PROVIDER.URL,PROVIDER.EMAIL,PROVIDER.TEL,PROVIDER.DESCRIPTION FROM BONUS LEFT JOIN ANSWER ON BONUS.ID=ANSWER.BONUSID LEFT JOIN QUESTION ON ANSWER.QUESTIONID=QUESTION.ID LEFT JOIN PROVIDER ON QUESTION.PID=PROVIDER.ID WHERE BONUS.CODE=\"$bonuscode\" GROUP BY BONUS.CODE",'ID') || undef;
  if(!%{$bonusinfo}){
    $self->stash(capt=>'Бонус не найден',message=>'Указанный код не найден. Вероятно вы ошиблись при вводе кода бонуса.');
    return $self->render('robot');
  }
  $self->stash(bonusinfo=>$bonusinfo,
               fn=>$fieldname);
  $self->render('bonus');
};

post '/bonus/:actions'=>sub{
  my $self=shift;
  my $actions=$self->param('actions');
  my $param=$self->req->params->to_hash;
  my $fn=$param->{'fn'};
  my $bonuscode=$param->{$fn};#Get unique bonuscode fielname
  my $bonusinfo=$dbh->selectall_hashref("SELECT BONUS.ID,BONUS.CODE,BONUS.SYSDATE,BONUS.STATUSDATE,BONUS.STATUS,BONUS.BONUSINFO,PROVIDER.NAME AS PROVIDER,PROVIDER.URL,PROVIDER.EMAIL,PROVIDER.TEL,PROVIDER.DESCRIPTION FROM BONUS LEFT JOIN ANSWER ON BONUS.ID=ANSWER.BONUSID LEFT JOIN QUESTION ON ANSWER.QUESTIONID=QUESTION.ID LEFT JOIN PROVIDER ON QUESTION.PID=PROVIDER.ID WHERE BONUS.CODE=\"$bonuscode\" GROUP BY BONUS.CODE",'ID') || undef;
  if(!%{$bonusinfo}){
    $self->stash(capt=>'Бонус не найден',message=>'Указанный код не найден. Вероятно вы ошиблись при вводе кода бонуса.');
    return $self->render('robot');
  }
  if($actions eq 'print'){
    $self->stash(bonusinfo=>$bonusinfo,bonuscode=>$bonuscode,fn=>$fn);
    return $self->render('print');
  }elsif($actions eq 'close'){
    $dbh->do("UPDATE BONUS SET BONUS.STATUS=1,BONUS.STATUSDATE=NOW() WHERE BONUS.CODE=\"$bonuscode\" AND BONUS.STATUS=0");
    $self->stash(capt=>'Бонус отменён',message=>'Получение бонусной услуги по данному коду невозможно.');
    return $self->render('robot');
  }
  $self->stash(capt=>'Действие не определено',message=>'Непонятно, как вы сюда попали то?');
  $self->render('robot');
};

post '/sendclaim'=>sub{
  my $self=shift;
  my $bonuscode=$self->param('bonuscode') || 0;
  my $description=$self->param('description');
  my $message='';
  my $bonuscodeid=$dbh->selectrow_array("SELECT BONUS.ID FROM BONUS WHERE BONUS.CODE='$bonuscode'") || 0;
  if($bonuscodeid){
    $dbh->do("INSERT INTO CLAIM (ID,BONUSID,DESCRIPTION,SDATE) VALUES (NULL,$bonuscodeid,\"$description\",NOW())") || die $dbh->err;
    $message='Спасибо за обращение. Мы сообщим вам о результатах на адрес электронной почты.';
  }else{
    $message="Код бонуса <b>$bonuscode</b> неверен. Укажите правильный код.";
  }
  $self->stash(capt=>'Получение претензии',
               message=>$message);
  $self->render('robot');
};

app->start;